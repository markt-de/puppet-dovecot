#!/bin/bash
#
#       /etc/rc.d/init.d/poolmon
#
# Starts the poolmon daemon
#
# chkconfig: - 70 30
# description: Poolmon mailserver pool monitor
# processname: poolmon
# pidfile: /var/run/poolmon.pid

### BEGIN INIT INFO
# Provides: poolmon
# Required-Start: $network
# Required-Stop: $network
# Default-Start: 
# Default-Stop: 0 1 2 3 4 5 6
# Short-Description: start and stop Poolmon mailserver pool monitor
# Description: Poolmon monitors a pool of Dovecot director mailservers
#		and dynamically alters their state based on active health
#		checks performed at regular intervals.
### END INIT INFO

# Source function library.
. /etc/init.d/functions

if [ -f <%= $dovecot::poolmon_config_file %> -a $UID -eq 0 ]; then
    . <%= $dovecot::poolmon_config_file %>
fi

RETVAL=0
prog="Poolmon"
exec="<%= $dovecot::poolmon_exec %>"
pidfile="<%= $dovecot::poolmon_config['lockfile'] %>"
lockfile="/var/lock/subsys/poolmon"

start() {
	[ $UID -eq 0 ] || exit 4
	[ -x $exec ] || exit 5

	echo -n $"Starting $prog: "
	daemon --pidfile $pidfile $exec $OPTIONS
	RETVAL=$?
	[ $RETVAL -eq 0 ] && touch $lockfile
	echo
}

stop() {
	[ $UID -eq 0 ] || exit 4
	echo -n $"Stopping $prog: "
	killproc -p $pidfile $exec
	RETVAL=$?
	[ $RETVAL -eq 0 ] && rm -f $lockfile
	echo
}

reload() {
	[ $UID -eq 0 ] || exit 4
	echo -n $"Reloading $prog: "
	killproc -p $pidfile $exec -HUP
	RETVAL=$?
	echo
}

#
#	See how we were called.
#
case "$1" in
  start)
	start
	;;
  stop)
	stop
	;;
  reload)
	reload
	;;
  force-reload|restart)
 	stop
	sleep 1
	start
 	RETVAL=$?
	;;
  condrestart|try-restart)
 	if [ -f $lockfile ]; then
	    stop
	    sleep 3
	    start
	fi
	;;
  status)
	status -p $pidfile $exec
	RETVAL=$?
	;;
  *)
	echo $"Usage: $0 {condrestart|try-restart|start|stop|restart|reload|force-reload|status}"
	RETVAL=2
	[ "$1" = 'usage' ] && RETVAL=0
esac

exit $RETVAL

